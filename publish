#!/bin/sh -ef

# publish: publishes build results to a certain repository.
#
# Copyright (C) 2016-2020 Kaitai Project
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

GH_USER=kaitai-io
GH_REPO_NAME=ci_artifacts
GH_REPO_BRANCH="$TARGET$SUBTARGET/$VARIETY"

export GIT_AUTHOR_NAME='Kaitai Bot'
export GIT_AUTHOR_EMAIL='kaitai-bot@kaitai.io'
export GIT_COMMITTER_NAME='Kaitai Bot'
export GIT_COMMITTER_EMAIL='kaitai-bot@kaitai.io'

if [ -z "$BOT_SSH_KEY" ]; then
	echo "BOT_SSH_KEY is not set!"
	exit 1
fi

unset SSH_AGENT_PID SSH_AUTH_SOCK

echo -n 'Setting up bot key... '
echo "$BOT_SSH_KEY" | base64 --decode >$HOME/bot_id
chmod 600 $HOME/bot_id
echo OK

echo -n 'Checking if key looks valid... '
key_head=$(head -n1 $HOME/bot_id)
if [ "$key_head" != '-----BEGIN RSA PRIVATE KEY-----' ]; then
	echo 'Nope, key seems to be invalid'
	exit 1
fi
echo -n 'OK, '

echo 'Setting up known_hosts'
mkdir -p $HOME/.ssh
chmod 700 $HOME/.ssh
need_add_ssh_key=0
if [ -f "$HOME/.ssh/known_hosts" ]; then
	echo '... it already exists:'
	cat $HOME/.ssh/known_hosts
	if grep -q '^github.com ssh-rsa ' "$HOME/.ssh/known_hosts"; then
		need_add_ssh_key=0
	else
		echo '... but misses github.com key, adding'
		need_add_ssh_key=1
	fi
else
	need_add_ssh_key=1
fi

if [ "$need_add_ssh_key" = 1 ]; then
	echo '... setting up github.com key'
	echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >>$HOME/.ssh/known_hosts
fi

# Dump bot_id SHA1 to check key validity. Linux uses "sha1sum", OS X uses
# "shasum", but even if both fails, it's not super critical.
sha1sum $HOME/bot_id || shasum $HOME/bot_id || :

# Alas, it seems that Travis CI uses ancient git that doesn't support this
#export GIT_SSH_COMMAND="ssh -i $HOME/bot_id"

# Squelch long git push strategy explanations
git config --global push.default simple

echo -n 'Setting up ssh wrapper... '
cat >$HOME/git-ssh <<__EOF__
#!/bin/sh -efx
ssh -i "$HOME/bot_id" "\$@"
__EOF__
chmod a+x $HOME/git-ssh
export GIT_SSH="$HOME/git-ssh"
echo 'OK'

echo 'Cloning website repo...'
if git clone --branch="$GH_REPO_BRANCH" git@github.com:"$GH_USER"/"$GH_REPO_NAME".git; then
	echo "OK"
else
	echo "Branch seems to be not available => trying to create it"
	git clone git@github.com:"$GH_USER"/"$GH_REPO_NAME".git
	cd "$GH_REPO_NAME"
	git checkout -b "$GH_REPO_BRANCH"
	cd ..
fi

echo 'Finding rsync executable...'
if rsync --version; then
	RSYNC_BIN=rsync
elif /c/cygwin64/bin/rsync.exe --version; then
	RSYNC_BIN=/c/cygwin64/bin/rsync.exe
else
	echo "Unable to find rsync, bailing out :("
	exit 1
fi

echo 'Updating the files...'
"$RSYNC_BIN" --delete-after -c --exclude=.git --exclude=.travis.yml -r -v tests/test_out "$GH_REPO_NAME"

echo 'Adding and committing...'
cd "$GH_REPO_NAME"
git add --all .
git commit -m "Submitted results from Travis build"

echo 'Pushing...'
git push -u origin "$GH_REPO_BRANCH"

echo -n 'Cleaning up the key and wrapper... '
rm "$HOME/bot_id" "$HOME/git-ssh"
echo OK
